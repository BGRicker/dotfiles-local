map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>


" Make it obvious where 120 characters is
set textwidth=120

let g:rspec_command = "!bundle exec rspec --drb {spec}"

set termguicolors

" Theme
" set background=dark
" set background=light
" colorscheme perun
" let g:gruvbox_italic=1
" colorscheme gruvbox
colorscheme blayu
" colorscheme tender

" colorscheme OceanicNextLight

" colorscheme janah
" colorscheme nightfly
" colorscheme dogrun
" colorscheme xcodedarkhc

" colorscheme synthwave84
" colorscheme polar
" colorscheme sonokai
" colorscheme miramare
" colorscheme simple-dark
"
" colorscheme eighties
" let g:SnazzyTransparent = 1
" let g:lightline = {
" \ 'colorscheme': 'snazzy',
" \ }



set t_Co=256
set relativenumber

" Run NeoMake on read and write operations
autocmd! BufReadPost,BufWritePost * Neomake

" Disable inherited syntastic
let g:syntastic_mode_map = {
  \ "mode": "passive",
  \ "active_filetypes": [],
  \ "passive_filetypes": [] }

let g:neomake_serialize = 1
let g:neomake_serialize_abort_on_error = 1

" set rtp+=/usr/local/opt/fzf


" This is the default extra key bindings
" let g:fzf_action = {
"   \ 'ctrl-t': 'tab split',
"   \ 'ctrl-x': 'split',
"   \ 'ctrl-v': 'vsplit' }
"
" " Default fzf layout
" " - down / up / left / right
" let g:fzf_layout = { 'down': '~40%' }
"
" " In Neovim, you can set up fzf window using a Vim command
" let g:fzf_layout = { 'window': 'enew' }
" let g:fzf_layout = { 'window': '-tabnew' }
" let g:fzf_layout = { 'window': '10new' }
"
" " Customize fzf colors to match your color scheme
" let g:fzf_colors =
" \ { 'fg':      ['fg', 'Normal'],
"   \ 'bg':      ['bg', 'Normal'],
"   \ 'hl':      ['fg', 'Comment'],
"   \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
"   \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
"   \ 'hl+':     ['fg', 'Statement'],
"   \ 'info':    ['fg', 'PreProc'],
"   \ 'border':  ['fg', 'Ignore'],
"   \ 'prompt':  ['fg', 'Conditional'],
"   \ 'pointer': ['fg', 'Exception'],
"   \ 'marker':  ['fg', 'Keyword'],
"   \ 'spinner': ['fg', 'Label'],
"   \ 'header':  ['fg', 'Comment'] }
"
" " Enable per-command history.
" " CTRL-N and CTRL-P will be automatically bound to next-history and
" " previous-history instead of down and up. If you don't like the change,
" " explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
" let g:fzf_history_dir = '~/.local/share/fzf-history'

if &diff
    set diffopt-=internal
    set diffopt+=vertical
endif
